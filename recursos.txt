@media only screen and (max-width: @screen__m)

alt+shift+g -> lines
ctrl+d -> duplicate
alt+j -> select next
ctrl + n -> open file

----------
Composer copy files command for docker container magento 2:
----------
alias composertocontainer='cd /home/ezeac/www/yogaworks/src/ && cp composer.lock composer.lock.bk && cp composer.json composer.json.bk && cd .. && bin/copytocontainer composer.json.bk && bin/copytocontainer composer.lock.bk && bin/cli bash -c "cp composer.lock.bk composer.lock && cp composer.json.bk composer.json"'
alias composerfromcontainer='cd /home/ezeac/www/yogaworks && bin/cli bash -c "cp composer.lock composer.lock.bk && cp composer.json composer.json.bk" && bin/copyfromcontainer composer.json.bk && bin/copyfromcontainer composer.lock.bk && cd src && cp composer.json.bk composer.json && cp composer.lock.bk composer.lock && git status'

----------
Deploy completo magento 2:
----------
rm -rf var/cache/* var/generation/* var/di/* var/view_preprocessed/* var/page_cache/* pub/static/*
php bin/magento setup:upgrade && php bin/magento setup:di:compile && php bin/magento setup:static-content:deploy -f && php bin/magento cache:flush && php bin/magento indexer:reindex
----------


----------
Comandos deploy magento 2:
----------
php bin/magento setup:static-content:deploy es_AR es_ES en_US -f

php bin/magento cache:flush
php bin/magento cache:enable
php bin/magento maintenance:disable
php bin/magento indexer:reindex
sudo chown -R $USER:www-data . && sudo chmod -R 664 . && sudo find . -type d -exec chmod 775 {} \; && sudo chmod u+x,g+x php bin/magento && sudo find . -path '*.sh' -exec chmod u+x,g+x {} \;
sudo chmod -R 775 pub/ var/ generated/
php bin/magento cache:clean
# Restart service php
sudo systemctl restart php7.2-fpm.service
----------


----------
Subir rama de la tarea a rama gitlab + Merge rama intermedia gitlab + Deploy en rama cloud
----------
 - Recordar realizar el commit en la rama de la tarea en gitlab antes de ejecutar el script
 - Importante: Este script va a descartar todos los cambios que no se encuentren en el commit (git checkout .), también va a rehacer la rama local "stagingGlobe" (ramaIntermediaGitlab) y "Evolutivo" (ramaDeployCloud, git branch -D stagingGlobe)

nombreRama=$(git branch --show-current);
remoteGitlab=gitlab; remoteCloud=origin;
ramaIntermediaGitlab=stagingGlobe; ramaDeployCloud=Evolutivo

echo '' && echo "git push $remoteGitlab $nombreRama" && git push $remoteGitlab "$nombreRama" &&
echo '' && echo "git fetch --all" && git fetch --all &&
echo '' && echo "git checkout ." && git checkout . &&

echo '' && echo "git branch -D $ramaIntermediaGitlab; git checkout --track $remoteGitlab/$ramaIntermediaGitlab -b $ramaIntermediaGitlab" && git branch -D $ramaIntermediaGitlab; git checkout --track "$remoteGitlab/$ramaIntermediaGitlab" -b $ramaIntermediaGitlab &&
echo '' && echo "git pull" && git pull &&
echo '' && echo "git merge $remoteGitlab/$nombreRama" && git merge "$remoteGitlab/$nombreRama" &&
echo '' && echo "git push $remoteGitlab $ramaIntermediaGitlab" && git push $remoteGitlab $ramaIntermediaGitlab &&

echo '' && echo "git branch -D $ramaDeployCloud; git checkout --track $remoteGitlab/$ramaDeployCloud -b $ramaDeployCloud" && git branch -D $ramaDeployCloud; git checkout --track "$remoteGitlab/$ramaDeployCloud" -b $ramaDeployCloud &&
echo '' && echo "git pull" && git pull &&
echo '' && echo "git pull $remoteCloud $ramaDeployCloud" && git pull $remoteCloud $ramaDeployCloud &&
echo '' && echo "git merge $remoteGitlab/$ramaIntermediaGitlab" && git merge "$remoteGitlab/$ramaIntermediaGitlab" &&
echo '' && echo "git push $remoteGitlab HEAD:$ramaDeployCloud" && git push $remoteGitlab HEAD:$ramaDeployCloud &&
echo '' && echo "git push $remoteCloud HEAD:$ramaDeployCloud" && git push $remoteCloud HEAD:$ramaDeployCloud &&
echo 'bin/magento maintenance:disable' | mgc ssh -e Evolutivo
----------


----------
Subir de rama Gitlab (stagingGlobe gitlab) a rama Cloud (Evolutivo cloud) y push al gitlab y cloud
----------
 - Recordar realizar el commit en la rama de la tarea en gitlab antes de ejecutar el script
 - Importante: Este script va a descartar todos los cambios que no se encuentren en el commit (git checkout .), también va a rehacer la rama "stagingGlobe" (ramaIntermediaGitlab) y "Evolutivo" (ramaDeployCloud, git branch -D stagingGlobe)

remoteGitlab=gitlab; remoteCloud=origin;
ramaIntermediaGitlab=stagingGlobe; ramaDeployCloud=staging

echo '' && echo "git branch -D temp" && git branch -D temp;
echo '' && echo "git fetch --all" && git fetch --all &&
echo '' && echo "git checkout ." && git checkout . &&
echo '' && echo "git checkout -b temp" && git checkout -b temp &&
echo '' && echo "git branch -D $ramaDeployCloud; git checkout --track $remoteGitlab/$ramaDeployCloud -b $ramaDeployCloud" && git branch -D $ramaDeployCloud; git checkout --track "$remoteGitlab/$ramaDeployCloud" -b $ramaDeployCloud &&
echo '' && echo "git pull" && git pull &&
echo '' && echo "git merge $remoteGitlab/$ramaIntermediaGitlab" && git merge "$remoteGitlab/$ramaIntermediaGitlab" &&
echo '' && echo "git push $remoteGitlab HEAD:$ramaDeployCloud" && git push $remoteGitlab HEAD:$ramaDeployCloud &&
echo '' && echo "git push $remoteCloud HEAD:$ramaDeployCloud" && git push $remoteCloud HEAD:$ramaDeployCloud &&
echo '' && echo "git branch -D temp" && git branch -D temp
----------



----------
delete from patch_list where patch_name like "%RustySetup%"; exit;
echo 'delete from patch_list where patch_name like "%GlobeSetup%";' | mgc sql -e Evolutivo
https://local.maui.com/static/frontend/Linets/Rusty/es_CL/images/Background-Team.jpg
----------


----------
Deploy a STG RUSTY
----------
echo 'delete from patch_list where patch_name like "%RustySetup%";' | mgc db:sql -r database && git push origin Evolutivo
git fetch --all && git checkout integration && git pull origin integration && git merge Evolutivo && echo '' && echo 'Status:' && echo '' && git status
git push origin integration
git fetch --all && git checkout staging && git pull origin staging && echo 'delete from patch_list where patch_name like "%RustySetup%";' | mgc db:sql -r database
git log --name-only --no-merges origin/staging..integration > log_deploy_stg_$(date +%F_%R).log
git log -p --no-merges origin/staging..integration > diff_deploy_stg_$(date +%F_%R).log
git merge integration && echo '' && echo 'Status:' && echo '' && git status
git push origin staging
----------


----------
PHP Mostrar errores:
----------
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
----------


----------
JQuery AJAX ejemplo:
----------
//CONSULTA AJAX
$.ajax({
  url: "https://local.maui.com/checkout/transaction/commitwebpay",
  data: 'token_ws=01abb9dd0c8e18fef74477616bdeb9ed83d80a1d96893750190a25e5544e53a0',
  error: function(xhr){
    console.log("Ocurrió un error: " + xhr.status + " " + xhr.statusText);
  },
  success: function(result){
    console.log(result)
  },
  method: 'POST'
});
----------


----------
Fix bbdd después de clonar magento2:
----------
update core_config_data set value = "http://shop.yogaworks.com/" where path like "%base_url%" or path like "%base_link_url%";
update sales_order set customer_email = replace(customer_email , "@", "@test") where customer_email NOT LIKE "%linets.cl%";
update sales_flat_order set customer_email = replace(customer_email , "@", "@test") where customer_email NOT LIKE "%linets.cl%";
update customer_entity set email = replace(email, "@", "@test") where email NOT LIKE "%linets.cl%";
----------


----------
Crear user magento 2 cli:
----------
php bin/magento admin:user:create --admin-user="ecrosa" --admin-password="magento123" --admin-email="ezequiel@godigitalmg.com" --admin-firstname="Ezequiel" --admin-lastname="Crosa"
----------


----------
Cambiar bbdd actual en el docker
----------
bin/cli sed -i 's/production/staging/g' app/etc/env.php
----------


----------
Clonar bbdd en entorno local desde cloud (ejecutar desde carpeta src):
----------
entorno=dev; remote_bbddName=magento; local_bbddName=magento; url=https://local.yogaworks.com/
echo '' && echo "Entorno: $entorno ------ Remote BBDD: $remote_bbddName ------ Local BBDD: $local_bbddName ------ URL: $url " && echo "Exportando BBDD" &&
echo '' && rm /home/ubuntu/bbdd_dev_$(date -I).sql.gz

Password: hkjAl6TiqqL5SulJQZ6S
Ejecutar en dev: mysqldump --quick --single-transaction --lock-tables=false -u magento -p magento | gzip -9 > /home/ubuntu/bbdd_dev_$(date -I).sql.gz
# echo '' && sshdev "mysqldump --quick --single-transaction --lock-tables=false -u magento -p $(echo $remote_bbddName) | gzip -9 > /home/ubuntu/bbdd_$(echo $entorno)_$(date -I).sql.gz"

echo '' && rsync --progress -zahe "ssh -i ~/staging.pem" ubuntu@ec2-44-207-203-158.compute-1.amazonaws.com:/home/ubuntu/bbdd_dev_$(date -I).sql.gz . &&
echo '' && sshdev "rm /home/ubuntu/bbdd_dev_$(date -I).sql.gz" &&
cd .. &&
echo '' && echo "Borrando bbdd local ($local_bbddName) anterior" && echo "drop database $local_bbddName; create database $local_bbddName" | bin/mysql &&
echo '' && echo "Importando nueva bbdd" && pv src/bbdd_dev_$(date -I).sql.gz | zcat | sed 's/utf8mb4_0900_ai_ci/utf8mb4_unicode_ci/g' | sed '/@@GLOBAL.GTID_PURGED=/d' | bin/mysql &&
# echo '' && echo "Importando nueva bbdd" && pv src/bbdd_dev_$(date -I).sql.gz | zcat | sed 's/utf8mb4_0900_ai_ci/utf8mb4_unicode_ci/g' | bin/mysql &&
echo "update core_config_data set value = \"$url\" where path like \"%base_url%\" or path like \"%base_link_url%\";" | bin/mysql &&
echo 'update sales_order set customer_email = replace(customer_email , "@", "@test") where customer_email NOT LIKE "%godigitalmg.com%";' | bin/mysql &&
echo 'update customer_entity set email = replace(email, "@", "@test") where email NOT LIKE "%godigitalmg.com%";' | bin/mysql &&
echo '' && echo "Importando config en magento" && bin/magento app:config:import &&
echo '' && bin/magento admin:user:create --admin-user="ecrosa" --admin-password="magento123" --admin-email="ezequiel.crosa@godigitalmg.com" --admin-firstname="Admin" --admin-lastname="Admin" &&
# echo '' && bin/magento config:set web/secure/offloader_header X-Scheme &&
bin/magento config:set web/url/use_store 1 && bin/magento config:set admin/security/session_lifetime 31536000 && bin/magento config:set catalog/search/elasticsearch7_server_hostname elasticsearch && bin/magento config:set catalog/search/elasticsearch7_server_port 9200 &&
echo '' && echo "Deploy magento y reindex" && bin/magento s:up && bin/magento indexer:reindex && echo "Listo."
----------


----------
Update staging environment:
----------
Export database from dev
Transfer database to local
Copy database to staging
Save elasticsearch hostname and port for lates use
Free ssh security connection on stg
Connect from dev to stg and rsync media files
Rollback ssh security connection on stg
Update env file crypt key
Delete and import new database on stg
Update url and update elasticsearch values
----------



----------
Fullsite backup
----------
mysqldump --quick --single-transaction --lock-tables=false -u magento -pmagento magento | gzip -9 > bbdd_backup.sql.gz && zip --exclude \"*/cache/*\" --exclude \"*.git/*\" --exclude \"*var/log/*\" --exclude \"*import/*\" --exclude \"*generated/*\" --exclude \"*pub/static/*\" -ru ../fullsite_backup_$(date -I).zip . && rm bbdd_backup.sql.gz
----------


----------
Borrar info del docker
----------
docker stop $(docker ps -aq) && docker rm $(docker ps -aq) && docker volume rm $(docker volume ls -q)
----------


----------
Introducción al proceso técnico en team Flor:
----------
Estábamos trabajando las tareas creando una rama en gitlab con el nombre "feature/COD-RAMA_Descripción" o "fix/COD-RAMA_Descripción".
Para el caso del proyecto "Globe", esta rama se crea saliendo desde la rama "stagingGlobe" de gitlab.
Cuando se finaliza, se sube el commit y la rama "feature/COD-RAMA_Descripción" al gitlab y se mergea esta rama en stagingGlobe
Si se quiere subir la tarea al entorno evolutivo
(para globe es https://globe.evolutivo-jt3jsri-rs3fciq7xma4k.us-3.magentosite.cloud/, admin en https://evolutivo-jt3jsri-rs3fciq7xma4k.us-3.magentosite.cloud/admin_linets)
se tiene que mergear la rama stagingGlobe a Evolutivo (del gitlab) y luego se hace el push al Evolutivo del cloud.
----------


----------
Descargar imágenes del cloud, ejecutar desde src:
----------
entorno=ubuntu@ec2-3-85-232-92.compute-1.amazonaws.com:/var/www/magento2/pub/media #dev yogaworks
entornossh='ssh -i "~/staging.pem"' #dev yogaworks

rsync --progress --exclude "*tmp/*" --exclude "*catalog/product*" --include='*.png' --include='*.jpg' --include='*.jpeg' --include='*.svg' --include='*/' --exclude='*' -ahe "$(echo $entornossh)" $(echo $entorno) pub/media/ && cd .. && bin/copytocontainer pub/media && echo "Listo."
----------


----------
repo.magento.com: 487e54978aa2587999004c639007b3b0  /  e0435dccfdeb71c2cba8a78db147a20c
----------


----------
Esto es lo que vamos a realizar para el paso a prod.
- Push prod a master ** (esto es para respandar última versión funcional)
- Update staging con prod ** (homologar ambientes)
- Pruebas en staging de maui y ripcurl
- Apuntar url final a prod, fastly (cliente) Configurar cnames (dominios)
- Push staging en prod ** (paso a proucción)
- Actualizar todos los cambios de DDBB (home, menú, categorías, páginas coroporativas, etc.)
- Configurar tbk prod
- Configurar despachos
- Importar productos (cliente)
----------


----------
SET global log_output = 'FILE';
SET global general_log_file='/var/www/html/mysql_general.log';
SET global general_log = 1;
----------


----------
Cómo poner slider owl carrousel con padding a los costados:
----------
// evitar en desktop:
.contentenedor {
    overflow: hidden;
    box-sizing: border-box;

    .owl-stage-outer {
        overflow: visible !important;
    }
}
//en mobile:
.contentenedor {
    width: 100vw;
    position: relative;
    left: 50%;
    margin-left: -50vw !important;
    padding: 0 40px !important;
    overflow: hidden !important;
}
----------



----------
Instalar grunt en docker magento:
----------
sudo apt install curl
curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
sudo apt install nodejs
copiar package.json.sample y Gruntfile.js.sample
setear "grunt-contrib-less": "1.4.1" en package.json
editar el dev/tools/grunt/configs/themes.js
cp dev/tools/grunt/configs/themes.js dev/tools/grunt/configs/local-themes.js
ejecutar bin/root npm install grunt-cli
ejecutar npm install y npm update en el dir de magento
usar con: bin/grunt exec && bin/grunt less && bin/grunt watch
----------




----------
Mostrar email por pantalla y en archivo magento 2:
----------
En función "prepareMessage" del archivo "vendor/magento/framework/Mail/Template/TransportBuilder.php":
        $myfile = fopen('../var/log/email' . time() . '.html', 'w+') or die('Unable to open file!');
        fwrite($myfile, $this->message->getBodyText()); fclose($myfile);
        echo $this->message->getBodyText(); exit;
        return $this;
----------




----------
Activar xdebug con vscode:
----------
- Revisar phpinfo para ver puerto
- Agregar config del php-debug con el archivo ".vscode" dentro de la carpeta src/ (corregir puerto con el visto en el paso anterior)
- Revisar IP del extra hosts en el docker-composer.yml
- Revisar xdebug mode con el comando "bin/xdebug status" y activar
- Agregar un breakpoint en el "pub/index.php" para ver si funciona ok
----------

----------
Activar xdebug con phpstorm:
----------
- https://github.com/markshust/docker-magento
y agregar host de (linux):
- https://stackoverflow.com/questions/70267681/xdebug-for-docker-not-connecting
----------




----------
Activar grunt docker:
----------
cp package.json.sample package.json
cp Gruntfile.js.sample Gruntfile.js
cp grunt-config.json.sample grunt-config.json
npm install
npm update
nano dev/tools/grunt/configs/themes.js
mv dev/tools/grunt/configs/themes.js dev/tools/grunt/configs/local-themes.js
t=luma && bin/grunt exec:$t && bin/grunt less:$t && bin/grunt watch
----------


----------
Magento2 custom script:
----------
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require 'app/bootstrap.php';
$bootstrap = Magento\Framework\App\Bootstrap::create(BP, $_SERVER);
$obj = $bootstrap->getObjectManager();

$test = $obj->create('Magento\Backend\Cron\CleanCache')->execute()
var_dump($test);

$obj->get('\Magento\Framework\App\State')->setAreaCode(\Magento\Framework\App\Area::AREA_ADMINHTML);
----------


----------
Convertir imágenes CR2 raw a jpg en carpeta (recorre la carpeta indicada y convierte las imágenes creando la nueva en la carpeta actual)
----------
find '/media/ezeac/0008-0000/Las Grutas/' -type f -path "*.CR2" -exec bash -c "dcraw -c \"\$0\" | convert -quality 90 -compress lzw - \$(echo \$(basename \"\$0\") | sed 's/CR2/jpg/g')" {} \; -print
find '/home/ezeac/Fotos/New Zealand' -type f -path "*.JPG" -exec bash -c "cat \"\$0\" | convert -quality 90 -compress lzw - \$(echo \$(basename \"\$0\") | sed 's/CR2/jpg/g')" {} \; -print

----------


----------
Windows WSL2
----------
export DISPLAY=$(route.exe print | grep 0.0.0.0 | head -1 | awk '{print $4}'):0.0 && terminator
----------

